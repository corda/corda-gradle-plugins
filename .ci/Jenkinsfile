#!groovy
/**
 * Jenkins pipeline to build Corda Gradle Plugins
 */

/**
 * Kill already started job.
 * Assume new commit takes precedence and results from previousunfinished builds are not required.
 * This feature doesn't play well with disableConcurrentBuilds() option
 */
@Library('corda-shared-build-pipeline-steps')
import static com.r3.build.BuildControl.killAllExistingBuildsForJob
killAllExistingBuildsForJob(env.JOB_NAME, env.BUILD_NUMBER.toInteger())

/**
 * Sense environment
 */
boolean isReleaseBranch = (env.BRANCH_NAME =~ /^release\/.*/)
boolean isRelease = (env.TAG_NAME =~ /^release\/.*/)

pipeline {
    agent {
        label 'standard'
    }
    parameters {
        booleanParam name: 'DO_PUBLISH',
                     defaultValue: (isReleaseBranch || isRelease),
                     description: 'Publish artifacts to Artifactory?'
    }
    options {
        ansiColor('xterm')
        timestamps()
        timeout(3*60) // 3 hours
        buildDiscarder(logRotator(daysToKeepStr: '14', artifactDaysToKeepStr: '14'))
    }
    environment {
        // Replace / with :: as links from Jenkins to Artifactory are broken if we use slashes
        // in the name
        ARTIFACTORY_BUILD_NAME = "Corda Gradle Plugins / Publish To Artifactory"
            .replaceAll("/", " :: ")
        ARTIFACTORY_REPO = "${isRelease ? "corda-releases" : "corda-dev"}"
        SNYK_TOKEN = "r3-gradle-plugins"
        SNYK_COMMANDS = "--all-sub-projects --configuration-matching='^runtimeClasspath\$' --prune-repeated-subdependencies --target-reference='${env.BRANCH_NAME}' --project-tags=Branch='${env.BRANCH_NAME.replaceAll("[^0-9|a-z|A-Z]+","_")}'"
    }
    stages {
        stage('Build') {
            steps {
                authenticateGradleWrapper()
                sh './gradlew --no-daemon -s --no-build-cache clean build'
            }
        }
        stage('Snyk Security Scan') {
            when {
                not {
                    changeRequest()
                }
            }
            steps {
                snykSecurityScan("${env.SNYK_TOKEN}", "${env.SNYK_COMMANDS}", true, true)
            }
        }
        stage('Publish to Artifactory') {
            when {
                expression { params.DO_PUBLISH }
                beforeAgent true
            }
            steps {
                rtServer (
                        id: 'R3-Artifactory',
                        url: 'https://software.r3.com/artifactory',
                        credentialsId: 'artifactory-credentials'
                )
                rtGradleDeployer (
                        id: 'deployer',
                        serverId: 'R3-Artifactory',
                        repo: env.ARTIFACTORY_REPO,
                )
                withCredentials([
                        usernamePassword(credentialsId: 'artifactory-credentials',
                                usernameVariable: 'CORDA_ARTIFACTORY_USERNAME',
                                passwordVariable: 'CORDA_ARTIFACTORY_PASSWORD')]) {
                    rtGradleRun (
                            usesPlugin: true,
                            useWrapper: true,
                            switches: "--no-daemon -s",
                            tasks: 'artifactoryPublish',
                            deployerId: 'deployer',
                            buildName: env.ARTIFACTORY_BUILD_NAME
                    )
                }
                rtPublishBuildInfo (
                        serverId: 'R3-Artifactory',
                        buildName: env.ARTIFACTORY_BUILD_NAME
                )
            }
        }
    }
    post {
        always {
            script {
                if(!env.CHANGE_ID) {
                    snykSecurityScan.generateHtmlElements()
                }
            }
            junit testResults: '**/build/test-results/**/*.xml', keepLongStdio: true, allowEmptyResults: true
        }
        cleanup {
            deleteDir()
        }
    }
}

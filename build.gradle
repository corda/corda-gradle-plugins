buildscript {
    // For sharing constants between builds
    Properties constants = new Properties()
    file("$projectDir/constants.properties").withInputStream { constants.load(it) }

    // If you bump this version you must re-bootstrap the codebase. See the README for more information.
    ext {
        gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        bouncycastle_version = constants.getProperty("bouncycastleVersion")
        typesafe_config_version = constants.getProperty("typesafeConfigVersion")
        jsr305_version = constants.getProperty("jsr305Version")
        kotlin_version = constants.getProperty("kotlinVersion")
        artifactory_plugin_version = constants.getProperty('artifactoryPluginVersion')
        snake_yaml_version = constants.getProperty('snakeYamlVersion')
        commons_io_version = '2.6'
        assertj_version = '3.8.0'
        junit_version = '4.12'
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:$artifactory_plugin_version"
    }
}

apply plugin: 'com.jfrog.artifactory'

allprojects {
    version gradle_plugins_version
    group 'net.corda.plugins'

    tasks.withType(Test) {
        // Prevent the project from creating temporary files outside of the build directory.
        systemProperty 'java.io.tmpdir', buildDir.absolutePath

        // Tell the tests where Gradle's current module cache is.
        // We need the tests to share this module cache to prevent the
        // Gradle Test-Kit from downloading its own copy of Kotlin etc.
        systemProperty 'test.gradle.user.home', project.gradle.gradleUserHomeDir
    }
}

def publishProjects = project.subprojects - project('api-scanner:annotations')

configure(publishProjects) { subproject ->
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.jfrog.artifactory'

    task sourceJar(type: Jar, dependsOn: subproject.classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: subproject.javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        publications {
            create(subproject.name, MavenPublication) {
                from components.java
                groupId subproject.group
                artifactId subproject.name
                artifact tasks.sourceJar
                artifact tasks.javadocJar

                pom.withXml {
                    asNode().children().last() + {
                        resolveStrategy = DELEGATE_FIRST
                        name subproject.name
                        description description
                        url 'https://github.com/corda/corda'
                        scm {
                            url 'https://github.com/corda/corda'
                        }

                        licenses {
                            license {
                                name 'Apache-2.0'
                                url 'https://www.apache.org/licenses/LICENSE-2.0'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'R3'
                                name 'R3'
                                email 'dev@corda.net'
                            }
                        }
                    }
                }
            }
        }
    }

    bintray {
        user = System.getenv('CORDA_BINTRAY_USER') || System.getProperty('corda.bintray.user')
        key = System.getenv('CORDA_BINTRAY_KEY') || System.getPropert('corda.bintray.key')
        publications = [subproject.name]
        dryRun = (System.getenv('CORDA_BINTRAY_DRYRUN') != null || System.getProperty('corda.bintray.dryrun') != null)
        pkg {
            repo = 'corda'
            name = subproject.name
            userOrg = 'r3'
            licenses = ['Apache-2.0']

            version {
                gpg {
                    sign = true
                    passphrase = System.getenv('CORDA_BINTRAY_GPG_PASSPHRASE')
                }
            }
        }
    }

    task install(dependsOn: 'publishToMavenLocal')
}

artifactory {
    publish {
        contextUrl = 'https://ci-artifactory.corda.r3cev.com/artifactory'
        repository {
            repoKey = 'corda-dev'
            username = System.getenv('CORDA_ARTIFACTORY_USERNAME') || System.getProperty('corda.artifactory.username')
            password = System.getenv('CORDA_ARTIFACTORY_PASSWORD') || System.getProperty('corda.artifactory.password')
        }

        defaults {
            if(publishProjects.contains(project)) {
                publications(project.name)
            }
        }
    }
}

wrapper {
    gradleVersion = "4.4.1"
    distributionType = Wrapper.DistributionType.ALL
}

import org.apache.tools.ant.filters.ReplaceTokens
import static org.gradle.jvm.toolchain.JavaLanguageVersion.of

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.dokka'
    id 'java-gradle-plugin'
}

description 'Configures this project to create a CPK CorDapp'

ext {
    osgi_service_component_version = '1.4.0'
    test_persistence_api_version = '2.2'
    test_hibernate_version = '5.4.32.Final'
    test_kotlin_version = '1.4.32'
    corda_guava_version = '20.0'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

gradlePlugin {
    plugins {
        cordappCpkPlugin {
            id = 'net.corda.plugins.cordapp-cpk'
            implementationClass = 'net.corda.plugins.cpk.CordappPlugin'
        }
        cordappCpbPlugin {
            id = 'net.corda.plugins.cordapp-cpb'
            implementationClass = 'net.corda.plugins.cpb.CpbPlugin'
        }
    }
    automatedPublishing = false
}

pluginBundle {
    website = project.vcsUrl
    vcsUrl = project.vcsUrl
    description = 'Corda Cordapp Builder Plugins'
    tags = ['corda']

    plugins {
        cordappCpkPlugin {
            displayName = 'Corda Cordapp CPK Plugin'
        }
        cordappCpbPlugin {
            displayName = 'Corda Cordapp CPB Plugin'
        }
    }
}

/**
 * The cordformation plugin needs to share the SigningOptions
 * class with the cordapp-cpk plugin, but we don't want the plugin
 * jars to depend upon each other. And so we share source code
 * rather than resort to shading!
 */
def generatedSourceDir = layout.buildDirectory.dir('generated-source')
def generateSource = tasks.register('generateSource', Copy) {
    from 'src/main/template'
    filter(ReplaceTokens, tokens: [root_package: 'net.corda.plugins.cpk'])
    into generatedSourceDir.map { it.dir('net/corda/plugins/cpk/signing') }
}

sourceSets {
    main {
        kotlin {
            srcDirs files('src/main/kotlin', generatedSourceDir).builtBy(generateSource)
        }
    }
}

dependencies {
    // Gradle plugins written in Kotlin will always use Gradle's
    // own provided Kotlin libraries at runtime. So ensure that
    // we don't add Kotlin as a dependency in our published POM.
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Add the Bnd plugins to our classpath too, so that we can use them.
    implementation "biz.aQute.bnd:biz.aQute.bnd.gradle:$bnd_version"
    implementation "biz.aQute.bnd:biz.aQute.bndlib:$bnd_version"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

processTestResources {
    filesMatching('gradle.properties') {
        expand([
            'osgi_service_component_version': osgi_service_component_version,
            'persistence_api_version': test_persistence_api_version,
            'hibernate_version': test_hibernate_version,
            'corda_guava_version': corda_guava_version,
            'corda_slf4j_version': slf4j_version,
            'osgi_version': osgi_version,
            'kotlin_version': test_kotlin_version,
            'java_home': System.getProperty('java.home'),
            'bnd_version': bnd_version
        ])
    }
}

tasks.register('kdocsJar', Jar) {
    def dokka = tasks.named('dokkaHtml')
    from dokka.flatMap { it.outputDirectory }
    archiveClassifier = 'javadoc'
}

tasks.withType(Javadoc).configureEach {
    options.showFromPackage()
}

tasks.withType(Test).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = of(11)
    }

    // Resolve warnings about "illegal reflective access" that
    // are generated by Gradle's own Groovy library.
    jvmArgs '--add-opens', 'java.base/java.io=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.jar=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util.zip=ALL-UNNAMED',
            '--illegal-access=warn'
}

import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java-gradle-plugin'
}

description 'Turns a project into a cordapp project that produces cordapp fat JARs'

repositories {
    mavenCentral()
}

gradlePlugin {
    plugins {
        cordappPlugin {
            id = 'net.corda.plugins.cordapp'
            implementationClass = 'net.corda.plugins.CordappPlugin'
        }
    }
    automatedPublishing = false
}

pluginBundle {
    website = project.vcsUrl
    vcsUrl = project.vcsUrl
    description = 'Corda Cordapp Builder Plugin'
    tags = ['corda']

    plugins {
        cordappPlugin {
            displayName = 'Corda Cordapp Plugin'
        }
    }
}

sourceSets {
    main {
        kotlin {
            srcDirs files('src/main/kotlin', "$buildDir/generated-source")
        }
    }
}

dependencies {
    // Gradle plugins written in Kotlin will always use Gradle's
    // own provided Kotlin libraries at runtime. So ensure that
    // we don't add Kotlin as a dependency in our published POM.
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version")
    testImplementation "org.assertj:assertj-core:$assertj_version"
}

/**
 * The cordapp plugin needs to share the SigningOption
 * class with the cordapp-cpk plugin, but we don't want the plugin
 * jars to depend upon each other. And so we share source code
 * rather than resort to shading!
 */
def generateSource = tasks.register('generateSource', Copy) {
    from "${project(':cordapp-cpk').projectDir}/src/main/template"
    filter(ReplaceTokens, tokens: [root_package: 'net.corda.plugins.cordapp'])
    into file("$buildDir/generated-source")
}

tasks.named('compileKotlin') { Task task ->
    task.dependsOn generateSource
}

processResources {
    from("${project(':cordapp-cpk').projectDir}/src/main/resources")
}

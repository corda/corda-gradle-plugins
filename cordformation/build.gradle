apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'

description 'A small gradle plugin for adding some basic Quasar tasks and configurations to reduce build.gradle bloat.'

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    noderunner
}

sourceSets {
    runnodes {
        kotlin {
            srcDir file('src/noderunner/kotlin')
            compileClasspath += configurations.noderunner
        }
    }
}

gradlePlugin {
    plugins {
        cordformationPlugin {
            id = 'net.corda.plugins.cordformation'
            implementationClass = 'net.corda.plugins.Cordformation'
        }
    }
    automatedPublishing = false
}

pluginBundle {
    website = project.vcsUrl
    vcsUrl = project.vcsUrl
    description = 'Cordformation allows you to build your own local Corda networks for development'
    tags = ['corda']

    plugins {
        cordformationPlugin {
            displayName = 'Cordaformation - Corda Local Network Builder'
        }
    }
}

dependencies {
    compile project(":cordapp")
    // Gradle plugins written in Kotlin will always use Gradle's
    // own provided Kotlin libraries at runtime. So ensure that
    // we don't add Kotlin as a dependency in our published POM.
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "commons-io:commons-io:$commons_io_version"
    compile "com.typesafe:config:$typesafe_config_version"

    noderunner "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit"
    testImplementation "junit:junit:$junit_version" // TODO: Unify with core
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "net.corda:corda-node-api:5.0-SNAPSHOT"
    testImplementation "net.corda:corda-serialization:5.0-SNAPSHOT"
    // Docker-compose file generation
    compile "org.yaml:snakeyaml:$snake_yaml_version"
}

task createNodeRunner(type: Jar) {
    manifest {
        attributes('Main-Class': 'net.corda.plugins.NodeRunnerKt')
    }
    classifier = 'fatjar'
    from { configurations.noderunner.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.runnodes.output
}

processResources {
    from(createNodeRunner) {
        rename { 'net/corda/plugins/runnodes.jar' }
    }
}

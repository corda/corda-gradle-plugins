buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'

description 'A small gradle plugin for adding some basic Quasar tasks and configurations to reduce build.gradle bloat.'

repositories {
    mavenCentral()
}

configurations {
    noderunner
    compile.extendsFrom noderunner
}

sourceSets {
    runnodes {
        kotlin {
            srcDir file('src/noderunner/kotlin')
            compileClasspath += configurations.noderunner
        }
    }
}

gradlePlugin {
    plugins {
        cordformationPlugin {
            id = 'net.corda.plugins.cordformation'
            implementationClass = 'net.corda.plugins.Cordformation'
        }
    }
    automatedPublishing = false
}

dependencies {
    compile project(":cordapp")
    compile project(':cordform-common')
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "commons-io:commons-io:$commons_io_version"

    noderunner "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testCompile "junit:junit:$junit_version" // TODO: Unify with core
    testCompile "org.assertj:assertj-core:$assertj_version"
    // Docker-compose file generation
    compile "org.yaml:snakeyaml:$snake_yaml_version"
}

task createNodeRunner(type: Jar) {
    manifest {
        attributes('Main-Class': 'net.corda.plugins.NodeRunnerKt')
    }
    classifier = 'fatjar'
    from { configurations.noderunner.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.runnodes.output
}

processResources {
    from(createNodeRunner) {
        rename { 'net/corda/plugins/runnodes.jar' }
    }
}

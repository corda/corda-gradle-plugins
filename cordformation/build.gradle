import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.dokka'
    id 'com.gradle.plugin-publish'
    id 'java-gradle-plugin'
    id 'java-library'
}

description 'Cordformation allows you to build your own local Corda networks for development.'

ext {
    corda_release_version = '4.8'
}

repositories {
    mavenCentral()
    maven {
        url "$artifactory_contextUrl/corda-dependencies"
    }
}

configurations {
    noderunner
}

/**
 * The cordformation plugin needs to share the SigningOption
 * class with the cordapp plugin, but we don't want the plugin
 * jars to depend upon each other. And so we share source code
 * rather than resort to shading!
 */
def generatedSourceDir = file("$buildDir/generated-source")
def generateSource = tasks.register('generateSource', Copy) {
    from project(':cordapp').file('src/main/template')
    filter(ReplaceTokens, tokens: [root_package: 'net.corda.plugins.cordformation'])
    into file("$generatedSourceDir/net/corda/plugins/cordformation/signing")
}

sourceSets {
    main {
        kotlin {
            srcDirs files('src/main/kotlin', generatedSourceDir).builtBy(generateSource)
        }
    }
    runnodes {
        kotlin {
            srcDir file('src/noderunner/kotlin')
            compileClasspath += configurations.noderunner
        }
    }
}

gradlePlugin {
    plugins {
        cordformationPlugin {
            id = 'net.corda.plugins.cordformation'
            implementationClass = 'net.corda.plugins.Cordformation'
        }
    }
    automatedPublishing = false
}

pluginBundle {
    website = project.vcsUrl
    vcsUrl = project.vcsUrl
    description = 'Cordformation allows you to build your own local Corda networks for development'
    tags = ['corda']

    plugins {
        cordformationPlugin {
            displayName = 'Cordaformation - Corda Local Network Builder'
        }
    }
}

dependencies {
    constraints {
        implementation('org.slf4j:slf4j-api') {
            version {
                require slf4j_version
            }
        }
        implementation('org.apache.commons:commons-compress') {
            version {
                require commons_compress_version
                because 'CVE-2021-35515, CVE-2021-35516, CVE-2021-35517, CVE-2021-36090'
            }
        }
        implementation('commons-codec:commons-codec') {
            version {
                require commons_codec_version
            }
        }
        implementation('commons-collections:commons-collections') {
            version {
                require commons_collections_version
                because 'CVE-2015-7501, CVE-2015-4852'
            }
        }
        implementation('commons-io:commons-io') {
            version {
                require commons_io_version
            }
        }
        implementation('com.fasterxml.jackson.core:jackson-databind') {
            version {
                require jackson_version
                because 'CVE-2020-36518'
            }
        }
        implementation('com.fasterxml.jackson.datatype:jackson-datatype-guava') {
            version {
                require jackson_version
            }
        }
        implementation('com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider') {
            version {
                require jackson_version
            }
        }
        implementation('org.bouncycastle:bcprov-jdk15on') {
            version {
                require bouncycastle_version
                because 'CVE-2020-15522'
            }
        }
        implementation('org.apache.httpcomponents:httpclient') {
            version {
                require httpclient_version
                because 'CVE-2020-13956'
            }
        }
        implementation('com.google.guava:guava') {
            version {
                require guava_version
                because 'CVE-2020-8908'
            }
        }
        implementation('com.github.jnr:jnr-posix') {
            version {
                require jnr_posix_version
            }
        }
        testRuntimeOnly('org.apache.logging.log4j:log4j-core') {
            version {
                require log4j_version
                because 'CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, CVE-2021-44832'
            }
        }
    }

    // Gradle plugins written in Kotlin will always use Gradle's
    // own provided Kotlin libraries at runtime. So ensure that
    // we don't add Kotlin as a dependency in our published POM.
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "com.typesafe:config:$typesafe_config_version"

    // Docker-compose file generation
    implementation "org.yaml:snakeyaml:$snake_yaml_version"

    // DockerFile Generation
    implementation("com.spotify:docker-client:$docker_client_version") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation "org.slf4j:jcl-over-slf4j:$slf4j_version"

    noderunner "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "net.corda:corda-serialization:$corda_release_version"
    testRuntimeOnly "net.corda:corda-node-api:$corda_release_version"
    testRuntimeOnly project(':cordapp')
}

tasks.named('validateTaskProperties', ValidateTaskProperties) {
    // The official advice is to annotate Path inputs
    // as @Input instead of @InputDirectory if we don't
    // care about the directory contents changing.
    // Unfortunately, Gradle also generates a warning
    // for this which we are forced to tolerate.
    failOnWarning = false
}

def createNodeRunner = tasks.register('createNodeRunner', Jar) {
    manifest {
        attributes('Main-Class': 'net.corda.plugins.NodeRunnerKt')
    }
    archiveClassifier = 'fatjar'
    from { configurations.noderunner.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.runnodes.output
    exclude '**/module-info.class'
}

processResources {
    from(createNodeRunner) {
        rename { 'net/corda/plugins/runnodes.jar' }
    }
}

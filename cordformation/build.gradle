import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java-gradle-plugin'
}

description 'Cordformation allows you to build your own local Corda networks for development.'

ext {
    corda_release_version = '4.3'
}

repositories {
    mavenCentral()
}

configurations {
    noderunner
}

sourceSets {
    main {
        kotlin {
            srcDirs files('src/main/kotlin', "$buildDir/generated-source")
        }
    }
    runnodes {
        kotlin {
            srcDir file('src/noderunner/kotlin')
            compileClasspath += configurations.noderunner
        }
    }
}

gradlePlugin {
    plugins {
        cordformationPlugin {
            id = 'net.corda.plugins.cordformation'
            implementationClass = 'net.corda.plugins.Cordformation'
        }
    }
    automatedPublishing = false
}

pluginBundle {
    website = project.vcsUrl
    vcsUrl = project.vcsUrl
    description = 'Cordformation allows you to build your own local Corda networks for development'
    tags = ['corda']

    plugins {
        cordformationPlugin {
            displayName = 'Cordaformation - Corda Local Network Builder'
        }
    }
}

dependencies {
    // Gradle plugins written in Kotlin will always use Gradle's
    // own provided Kotlin libraries at runtime. So ensure that
    // we don't add Kotlin as a dependency in our published POM.
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "com.typesafe:config:$typesafe_config_version"

    noderunner "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version")
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "net.corda:corda-serialization:$corda_release_version"
    testRuntimeOnly "net.corda:corda-node-api:$corda_release_version"
    // Docker-compose file generation
    implementation "org.yaml:snakeyaml:$snake_yaml_version"
    //DockerFile Generation
    implementation "com.spotify:docker-client:$docker_client_version"
}

/**
 * The cordformation plugin needs to share the SigningOption
 * class with the cordapp plugin, but we don't want the plugin
 * jars to depend upon each other. And so we share source code
 * rather than resort to shading!
 */
def generateSource = tasks.register('generateSource', Copy) {
    from "${project(':cordapp-cpk').projectDir}/src/main/template"
    filter(ReplaceTokens, tokens: [root_package: 'net.corda.plugins.cordformation'])
    into file("$buildDir/generated-source")
}

tasks.named('compileKotlin') { Task task ->
    task.dependsOn generateSource
}

tasks.named('validateTaskProperties', ValidateTaskProperties) {
    // The official advice is to annotate Path inputs
    // as @Input instead of @InputDirectory if we don't
    // care about the directory contents changing.
    // Unfortunately, Gradle also generates a warning
    // for this which we are forced to tolerate.
    failOnWarning = false
}

task createNodeRunner(type: Jar) {
    manifest {
        attributes('Main-Class': 'net.corda.plugins.NodeRunnerKt')
    }
    archiveClassifier = 'fatjar'
    from { configurations.noderunner.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.runnodes.output
}

processResources {
    from(createNodeRunner) {
        rename { 'net/corda/plugins/runnodes.jar' }
    }
}

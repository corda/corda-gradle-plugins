plugins {
    id 'com.gradle.plugin-publish'
    id "java-gradle-plugin"
    id 'groovy'
}

description 'Packages an application as an executable jar of jars.'

configurations {
    common {
        canBeConsumed = false
        transitive = false
        attributes { attr ->
            attr.attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }
    }

    launcher {
        canBeConsumed = false
        transitive = false
    }

    heartbeatAgent {
        canBeConsumed = false
        transitive = false
        attributes { attr ->
            attr.attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }
    }
}

dependencies {
    common project('flask-common')
    launcher project(path: 'flask-launcher', configuration: 'launcherAgent')
    heartbeatAgent project('flask-heartbeat-agent')
    compileOnly project('flask-common')
}

tasks.named("processResources") {
    from(files(configurations.heartbeatAgent)) {
        into 'META-INF'
    }
    from(files(configurations.launcher)) {
        into 'META-INF'
    }
}

tasks.named('jar', Jar) {
    manifest {
        attributes "version" : archiveVersion.get()
    }
    from {
        configurations.common.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

gradlePlugin {
    plugins {
        flaskPlugin {
            id = 'net.corda.plugins.flask'
            implementationClass = 'net.corda.gradle.flask.FlaskPlugin'
            displayName = 'Corda Flask Plugin'
            description = 'Corda Flask Plugin'
        }
    }
    automatedPublishing = false
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation project("flask-common")
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

tasks.named("pluginUnderTestMetadata", PluginUnderTestMetadata) {
    pluginClasspath.from(configurations.compileClasspath)
}

tasks.withType(Test).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }

    // Resolve warnings about "illegal reflective access" that
    // are generated by Gradle's own Groovy library.
    jvmArgs '--add-opens', 'java.base/java.io=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED',
            '--illegal-access=warn'
}

plugins {
    id 'groovy'
    id "java-gradle-plugin"
}

evaluationDependsOn("common")
evaluationDependsOn("launcher")

dependencies {
    compileOnly project("common")
}

FileCollection launcherTar = project("launcher").tasks.named("tar").get().outputs.files
FileCollection commonJar = project("common").tasks.named("jar").get().outputs.files

Provider<Copy> copyLauncher = tasks.register("copyLauncher", Copy) {
    from(launcherTar)
    into(new File(project.buildDir, "resources/main/META-INF"))
    rename 'launcher-.*\\.tar', 'flask-launcher.tar'
}

tasks.named("processResources") {
    inputs.files(copyLauncher.get().outputs)
}

jar {
    manifest {
        attributes "version" : archiveVersion.get()
    }
    from(zipTree(commonJar.singleFile))
}

gradlePlugin {
    plugins {
        flaskPlugin {
            id = 'net.corda.plugins.flask'
            implementationClass = 'net.corda.gradle.flask.FlaskPlugin'
        }
    }
    automatedPublishing = false
}

repositories {
    mavenCentral()
}

dependencies {
    ['compileOnly', 'annotationProcessor', 'testCompileOnly', 'testAnnotationProcessor'].each { conf ->
        add(conf, [group: "org.projectlombok", name: "lombok", version: lombok_version])
    }
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

tasks.named("pluginUnderTestMetadata", PluginUnderTestMetadata) {
    pluginClasspath.from(project.configurations.named("compileOnly").get())
}

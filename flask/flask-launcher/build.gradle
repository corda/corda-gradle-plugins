import java.util.jar.JarFile

plugins {
    id 'java-library'
}

sourceSets {
    lockFileTest
}

repositories {
    mavenCentral()
}

configurations {
    launcherAgent {
        canBeResolved = false
    }
}

dependencies {
    implementation project(':flask:flask-common')
    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation "org.slf4j:slf4j-simple:$slf4j_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

    lockFileTestImplementation project(':flask:flask-common')
}

def tar = tasks.register('tar', Tar) {
    archiveVersion = ''
    from sourceSets.main.output
    from {
        exclude JarFile.MANIFEST_NAME
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

Provider<Jar> lockFileTestExecutableJar = tasks.register("lockFileTestExecutableJar", Jar) {
    dependsOn tasks.named('jar', Jar)
    manifest {
        attributes "Main-Class": "net.corda.flask.launcher.LockFileTestMain"
    }
    archiveBaseName = "LockFileTest"
    from(sourceSets.lockFileTest.output)
    from {
        configurations.lockFileTestRuntimeClasspath.collect {
            if(it.exists()) {
                it.isDirectory() ? it : zipTree(it)
            } else {
                null
            }
        }
    }
}

tasks.named('test', Test) {
    dependsOn lockFileTestExecutableJar
    doFirst {
        systemProperty 'lockFileTest.executable.jar', lockFileTestExecutableJar.get().outputs.files.singleFile
        systemProperty 'org.slf4j.simpleLogger.defaultLogLevel', 'trace'
    }
}

artifacts {
    launcherAgent tar
}

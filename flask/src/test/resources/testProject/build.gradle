plugins {
    id 'net.corda.plugins.flask'
}

evaluationDependsOn('testAgent')

dependencies {
    implementation project('testAgent')
}

jar {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

flaskJar {
    destinationDir = project.buildDir
    archiveFileName = "flask.jar"
    mainClassName = "net.corda.gradle.flask.test.Main"
    launcherClassName = "net.corda.gradle.flask.test.TestLauncher"
    jvmArgs = ["-Xmx64M",
               "-Dsome.property=\"some nasty\nvalue\t\"",
               "-Danother.property=another nasty\nvalue\t",
               "-Dproperty.to.be.overridden=value from flask jar",
    ]
    preserveFileTimestamps = false
    javaAgents {
        testAgent {
            jar = project('testAgent').tasks.named('jar', Jar).flatMap { it.archiveFile }
            args = "testArgument"
        }
    }
}

flaskRun {
    workingDir = project.buildDir
    args = [
        "-flaskJvmArg=-Dproperty.to.be.overridden=value from cli",
        "arg1", "arg2", "arg3",
        "-flaskJvmArg=-Dsome.property.from.cli=some value from cli"
    ]
}

tasks.register("flaskRunMainClassOverride", JavaExec) {
    workingDir = project.buildDir
    Provider<Task> flaskJarTask = tasks.named("flaskJar")
    inputs.files(flaskJarTask)
    classpath(flaskJarTask)
    args = [
        "-flaskJvmArg=-Djava.agent.supposed.to.be.active=true"
    ]
    systemProperties([
        'net.corda.flask.main.class' : "net.corda.gradle.flask.test.AlternativeMain"
    ])
}

tasks.register("flaskRunDisableJavaAgent", JavaExec) {
    workingDir = project.buildDir
    Provider<Task> flaskJarTask = tasks.named("flaskJar")
    inputs.files(flaskJarTask)
    classpath(flaskJarTask)
    args = [
        "-flaskJvmArg=-Djava.agent.supposed.to.be.active=false"
    ]
    systemProperties([
        'net.corda.flask.main.class' : "net.corda.gradle.flask.test.AlternativeMain",
        'net.corda.flask.no.java.agent' : "true"
    ])
}

tasks.register("shutdownHookTestJar", FlaskJarTask) {
    Provider<Jar> jarTaskProvider = project.tasks.named('jar', Jar)
    mainClassName = "net.corda.gradle.flask.test.HangingMain"
    archiveFileName = "shutdownHookTest.jar"
    includeLibraries(jarTaskProvider.map {it.outputs })
}
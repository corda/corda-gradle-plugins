plugins {
    id 'net.corda.plugins.flask'
}

import net.corda.gradle.flask.FlaskJarTask
import net.corda.gradle.flask.FlaskJarTask.JavaAgent

evaluationDependsOn('testAgent')

configurations {
    agent {
        transitive = false
    }
}

dependencies {
    implementation project('testAgent')
}

File agentFile = project('testAgent').tasks.named('jar').get().outputs.files.singleFile
flaskJar {
    archiveBaseName = "flask"
    mainClassName = "net.corda.gradle.flask.test.Main"
    launcherClassName = "net.corda.gradle.flask.test.TestLauncher"
    jvmArgs = ["-Xmx64M",
               "-Dsome.property=\"some nasty\nvalue\t\"",
               "-Danother.property=another nasty\nvalue\t",
               "-Dproperty.to.be.overridden=value from flask jar",
    ]
    javaAgent {
        jar = agentFile
        args = "testArgument"
    }
}

flaskRun {
    workingDir = project.buildDir
    args = [
        "-flaskJvmArg=-Dproperty.to.be.overridden=value from cli",
        "arg1", "arg2", "arg3",
        "-flaskJvmArg=-Dsome.property.from.cli=some value from cli"
    ]
}

tasks.register("flaskRunMainClassOverride", JavaExec) {
    workingDir = project.buildDir
    Provider<Task> flaskJarTask = tasks.named("flaskJar")
    inputs.files(flaskJarTask)
    classpath(flaskJarTask)
    systemProperties([
        'net.corda.flask.main.class' : "net.corda.gradle.flask.test.AlternativeMain",
    ])
}
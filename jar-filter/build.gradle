plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'java-gradle-plugin'
    id 'jacoco'
}

description 'Deletes or stubs out unwanted elements from Java/Kotlin byte-code.'

repositories {
    mavenCentral()
}

ext {
    kotlin_metadata_version = '0.1.0'
    test_kotlin_api_version = '1.2'
}

gradlePlugin {
    plugins {
        jarFilterPlugin {
            id = 'net.corda.plugins.jar-filter'
            implementationClass = 'net.corda.gradle.jarfilter.JarFilterPlugin'
        }
    }
    automatedPublishing = false
}

pluginBundle {
    website = project.vcsUrl
    vcsUrl = project.vcsUrl
    description = 'Corda JAR Filter Plugin'
    tags = ['corda']

    plugins {
        jarFilterPlugin {
            displayName = 'Corda JAR Filter Plugin'
        }
    }
}

configurations {
    jacocoRuntime
}

dependencies {
    // Gradle plugins written in Kotlin will always use Gradle's
    // own provided Kotlin libraries at runtime. So ensure that
    // we don't add Kotlin as a dependency in our published POM.
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation("org.jetbrains.kotlinx:kotlinx-metadata-jvm:$kotlin_metadata_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation "org.ow2.asm:asm:$asm_version"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation "org.hamcrest:hamcrest:$hamcrest_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testImplementation project(':jar-filter:unwanteds')

    jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"
}

processTestResources {
    filesMatching('**/build.gradle') {
        expand(['kotlin_version': kotlin_version])
    }
    filesMatching('gradle.properties') {
        expand(['jacocoAgent': configurations.jacocoRuntime.asPath.replace('\\', '/'),
                'kotlin_api_version': test_kotlin_api_version,
                'buildDir': buildDir])
    }
}

tasks.withType(Test) {
    systemProperty 'test.kotlin.api', test_kotlin_api_version
}

// We need to modify how the publish task works.
ext {
    mavenPom = {
        it.name = 'Jar Filter'
    }
}

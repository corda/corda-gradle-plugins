import static org.gradle.jvm.toolchain.JavaLanguageVersion.of

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.dokka'
    id 'com.gradle.plugin-publish'
    id 'java-gradle-plugin'
    id 'java-library'
    id 'jacoco'
}

description 'Deletes or stubs out unwanted elements from Java/Kotlin byte-code.'

repositories {
    mavenCentral()
}

ext {
    kotlin_metadata_version = '0.3.0'
    test_kotlin_api_version = '1.4'
    test_kotlin_version = '1.4.32'
}

gradlePlugin {
    plugins {
        jarFilterPlugin {
            id = 'net.corda.plugins.jar-filter'
            implementationClass = 'net.corda.gradle.jarfilter.JarFilterPlugin'
            displayName = 'Corda JAR Filter Plugin'
            description = 'Corda JAR Filter Plugin'
        }
    }
    automatedPublishing = false
}

jacoco {
    // Upgrade to a version that is compatible with Java 17.
    toolVersion = '0.8.7'
}

configurations {
    jacocoRuntime {
        canBeConsumed = false
    }
}

dependencies {
    // Gradle plugins written in Kotlin will always use Gradle's
    // own provided Kotlin libraries at runtime. So ensure that
    // we don't add Kotlin as a dependency in our published POM.
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation("org.jetbrains.kotlinx:kotlinx-metadata-jvm:$kotlin_metadata_version") {
        exclude group: 'org.jetbrains.kotlin'
    }
    implementation "org.ow2.asm:asm:$asm_version"

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation "org.hamcrest:hamcrest:$hamcrest_version"
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testImplementation "javax.annotation:javax.annotation-api:$javax_annotations_version"
    testImplementation project(':jar-filter:unwanteds')

    jacocoRuntime "org.jacoco:org.jacoco.agent:${jacoco.toolVersion}:runtime"
}

tasks.named('compileTestKotlin') {
    kotlinOptions {
        apiVersion = test_kotlin_api_version
        languageVersion = test_kotlin_api_version
    }
}

processTestResources {
    filesMatching('gradle.properties') {
        expand(['jacocoAgent': configurations.jacocoRuntime.asPath.replace('\\', '/'),
                'java_home': System.getProperty('java.home'),
                'javax_annotations_version': javax_annotations_version,
                'kotlin_api_version': test_kotlin_api_version,
                'kotlin_version': test_kotlin_version,
                'buildDir': buildDir])
    }
}

tasks.withType(Test).configureEach {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = of(11)
    }

    doFirst {
        // Configures the @RequiresKotlin14 annotation.
        systemProperty 'test.kotlin.api', test_kotlin_api_version
    }

    // Resolve warnings about "illegal reflective access" that
    // are generated by Gradle's own Groovy library.
    jvmArgs '--add-opens', 'java.base/java.io=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.util=ALL-UNNAMED',
            '--illegal-access=warn'
}

// We need to modify how the publish task works.
ext {
    mavenPom = {
        it.name = 'Jar Filter'
    }
}

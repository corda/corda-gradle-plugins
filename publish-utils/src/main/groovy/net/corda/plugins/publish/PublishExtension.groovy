package net.corda.plugins.publish

import groovy.transform.PackageScope
import org.gradle.api.Action
import org.gradle.api.artifacts.Configuration
import org.gradle.api.model.ObjectFactory
import org.gradle.api.provider.Property
import org.gradle.api.provider.Provider

import javax.inject.Inject

@SuppressWarnings("unused")
class PublishExtension {
    private final Property<String> name
    private final Property<Boolean> disableDefaultJar
    private final Property<Boolean> publishWar
    private final Property<Boolean> publishSources
    private final Property<Boolean> publishJavadoc
    private final MavenDependencyExtension dependencyConfig
    private Configuration publishDependencies

    @Inject
    PublishExtension(ObjectFactory objects, String publishName) {
        name = objects.property(String).convention(publishName)
        disableDefaultJar = objects.property(Boolean.class).convention(false)
        publishWar = objects.property(Boolean.class).convention(false)
        publishSources = objects.property(Boolean.class).convention(true)
        publishJavadoc = objects.property(Boolean.class).convention(true)
        dependencyConfig = objects.newInstance(MavenDependencyExtension)
    }

    /**
     * Use a different name from the current project name for publishing.
     */
    Property<String> getName() {
        return name
    }

    void name(Provider<String> provider) {
        name.set(provider)
    }

    void name(String value) {
        name.set(value)
    }

    String name() {
        return name.get()
    }

    /**
     * True when we do not want to publish default Java components
     */
    Property<Boolean> getDisableDefaultJar() {
        return disableDefaultJar
    }

    void disableDefaultJar(boolean value) {
        disableDefaultJar.set(value)
    }

    /**
     * True if publishing a WAR instead of a JAR. Forces {@code disableDefaultJar} to "true" when true
     */
    Property<Boolean> getPublishWar() {
        return publishWar
    }

    void publishWar(boolean value) {
        publishWar.set(value)
    }

    /**
     * True if publishing sources to remote repositories
     */
    Property<Boolean> getPublishSources() {
        return publishSources
    }

    void publishSources(boolean value) {
        publishSources.set(value)
    }

    /**
     * True if publishing javadoc to remote repositories
     */
    Property<Boolean> getPublishJavadoc() {
        return publishJavadoc
    }

    void publishJavadoc(boolean value) {
        publishJavadoc.set(value)
    }

    /**
     * @return default configuration for Maven dependencies generated by "dependenciesFrom" field.
     */
    @PackageScope
    MavenDependencyExtension getDependencyConfig() {
        return dependencyConfig
    }

    @PackageScope
    Configuration getPublishDependencies() {
        return publishDependencies
    }

    /**
     * The Gradle configuration that defines this artifact's dependencies.
     * This overrides the dependencies that would otherwise be derived
     * from "components.java" or "components.web".
     * Implies both "disableDefaultJar=true" and "publishWar=false"
     *
     * <pre>
     * {@code
     * publish {
     *     dependenciesFrom configurations.runtimeArtifacts
     * }
     * }
     * </pre>
     * or
     * <pre>
     * {@code
     * publish {
     *     dependenciesFrom(configurations.runtimeArtifacts) {
     *         defaultScope = 'compile'
     *     }
     * }
     * }
     * </pre>
     *
     * @param dependencies
     * @param action
     */
    void dependenciesFrom(Configuration dependencies, Action<? super MavenDependencyExtension> action = null) {
        publishDependencies = dependencies
        if (action) {
            action.execute(dependencyConfig)
        }
    }
}

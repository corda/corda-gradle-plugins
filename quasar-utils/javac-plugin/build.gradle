plugins {
    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenCentral()
}

dependencies {

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit_jupiter_version
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: junit_jupiter_version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junit_jupiter_version

    if(JavaVersion.current() <= JavaVersion.VERSION_1_8) {
        compileOnly files("${System.properties['java.home']}/../lib/tools.jar")
        testRuntimeOnly files("${System.properties['java.home']}/../lib/tools.jar")
    }
}

if(JavaVersion.current() > JavaVersion.VERSION_1_8) {
    tasks.named("compileJava", JavaCompile.class) {
        sourceCompatibility(JavaVersion.VERSION_1_8.toString())
        targetCompatibility(JavaVersion.VERSION_1_8.toString())
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'javac-plugin'
            version = project.version
            from components.java
        }
    }
}

test {
    useJUnitPlatform()
    def testCompilationClassPath = sourceSets["main"].output.classesDirs.files +
            sourceSets["main"].runtimeClasspath.files +
            sourceSets["test"].resources.srcDirs
    systemProperty("test.compilation.classpath",
            String.join(File.pathSeparator, testCompilationClassPath.collect {it.toString() }))
}
